body file control
{
        namespace => "Red_Hat_Enterprise_Linux_7_STIG";
}
bundle agent V_204425
# https://www.stigviewer.com/stig/red_hat_enterprise_linux_7/2022-06-06/finding/V-204425
{

      # # grep -i PermitEmptyPasswords /etc/ssh/sshd_config\\
      # PermitEmptyPasswords no
      # If no line, a commented line, or a line indicating the value "no" is returned, the required value is set.

  vars:

    Red_Hat_Enterprise_Linux_7_STIG:supported_os::
      "config_file" string => "/etc/ssh/sshd_config";

      "lines" slist => grep( "(?i).*PermitEmptyPasswords.*",
                             readstringlist( $(config_file), "", "\n", inf, inf) );
      "non_comment_lines"
        slist => filter( "\s*#.*", lines, true, true, inf);

      "finding"
        string => "V-230235",
        meta => { "inventory",
                  "attribute_name=Red Hat Enterprise Linux 7 STIG V1 findings" },
        unless => or(
                      # If no lines match it's not a finding
                      strcmp( "0", length( lines ) ),
                      # Or if the lines are comments it's not a finding
                      strcmp( length(non_comment_lines), length( lines ) ),
                      # Or if all the non commented lines indicate no, it's not a finding
                      not( every( "^(?i) ?.*PermitEmptyPasswords\s+no\s*",
                                  non_comment_lines )));

  reports:
      "DEBUG In $(this.namespace):$(this.bundle)";
    Red_Hat_Enterprise_Linux_7_STIG:DEBUG::
      "DEBUG $(this.namespace):$(this.bundle): 0 lines matched PermitEmptyPasswords"
        if => strcmp( "0", length( lines ) );

      "DEBUG $(this.namespace):$(this.bundle): 0 matching lines were not comments"
        if => strcmp( "0", length(non_comment_lines) );

      "DEBUG $(this.namespace):$(this.bundle): every noncomment lines matches regex"
        unless => not( every( "^(?i) ?.*PermitEmptyPasswords\s+no\s*",
                     non_comment_lines ));


      "DEBUG $(this.namespace):$(this.bundle): Found" if => isvariable( finding );

}
