body file control
{
        namespace => "rhel_7_stig";
}
bundle agent V_204443
# @class `rhel_7_stig:V_204443_enforced` - Enables remediation (defined if `rhel_7_stig:enforced` is defined)
# @class `rhel_7_stig:V_204443_exception` - Disables remediation (defined if the variable `rhel_7_stig:exceptions.V_204443` is defined)
# @variable `rhel_7_stig:exceptions.V_204443` - Documents and disables remediation for this finding
{
      # If ypserv is installed, it's a finding

  classes:
    rhel_7_stig:enabled::

      "$(this.bundle)_enforced"
        expression => "$(this.namespace):enforced";

      "$(this.bundle)_exception"
        expression => isvariable( "$(this.namespace):exceptions.$(this.bundle)" );

      "$(this.bundle)_finding"
        expression => isgreaterthan( length( packagesmatching( "$(pkg)", ".*", ".*", ".*" ) ), 0 );

  vars:
    rhel_7_stig:enabled::
      "pkg" string => "ypserv";

      "finding"
        string => "V-204443",
        meta => { "inventory",
                  "attribute_name=$($(this.namespace):config.inventory_attribute)" },
        if => and( "$(this.namespace):$(this.bundle)_finding",
                   not( "$(this.namespace):$(this.bundle)_exception" ) );

      "finding_with_exception"
        string => "V-204443",
        meta => { "inventory",
                  "attribute_name=$($(this.namespace):config.inventory_attribute_exception)" },
        if => and( "$(this.namespace):$(this.bundle)_finding",
                   "$(this.namespace):$(this.bundle)_exception" );

  packages:
    rhel_7_stig:enabled::
      "$(pkg)"
        policy => "absent",
        if => "$(this.namespace):$(this.bundle)_enforced.!$(this.namespace):$(this.bundle)_exception";

      "$(pkg)"
        policy => "absent",
        action => default:warn_only,
        if => "$(this.namespace):$(this.bundle)_enforced.$(this.namespace):$(this.bundle)_exception";

  reports:
    rhel_7_stig:DEBUG::
      "DEBUG $(this.namespace):$(this.bundle): finding class"
        if => "$(this.namespace):$(this.bundle)_finding";
      "DEBUG $(this.namespace):$(this.bundle): not finding class"
        if => not( "$(this.namespace):$(this.bundle)_finding" );
      "DEBUG $(this.namespace):$(this.bundle): Found" if => isvariable( finding );
      "DEBUG $(this.namespace):$(this.bundle): packages matching $(pkg): $(with)"
        with => storejson( packagesmatching( "$(pkg)", ".*", ".*", ".*" ) );
}
